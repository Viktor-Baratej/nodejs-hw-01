import { writeContacts } from '../utils/writeContacts.js';
import { readContacts } from '../utils/readContacts.js';

export const removeLastContact = async () => {
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
    const contacts = await readContacts();

    if (!Array.isArray(contacts)) {
      throw new Error('–î–∞–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ!');
    }

    if (contacts.length === 0) {
      console.log('–ù–µ–º–∞—î –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.');
      return;
    }

    // –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç
    contacts.pop();

    // –ó–∞–ø–∏—Å—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ —É —Ñ–∞–π–ª
    await writeContacts(contacts);

    console.log('üóëÔ∏è –û—Å—Ç–∞–Ω–Ω—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É:', error.message);
  }
};

removeLastContact();
